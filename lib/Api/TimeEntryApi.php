<?php
/**
 * TimeEntryApi
 * PHP version 5
 *
 * @category Class
 * @package  ProgressionLive
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProgressionLIVE API
 *
 * Welcome to the ProgressionLIVE REST API documentation page.    The data exchange format is [JSON](https://en.wikipedia.org/wiki/JavaScript_Object_Notation). This format facilitates the exchange of data with almost all systems while minimizing the amount of data.    All API operations are listed on this page and can be tested directly.    An [OpenAPI](https://github.com/OAI/OpenAPI-Specification) specification file is available at the link above and allows you to generate clients in several languages ​​using [Swagger](https://swagger.io/swagger-codegen/) tools.    The examples on this page use the command-line tool from the well-known Unix family of systems [CURL](https://curl.haxx.se/). This demonstrates the ease of integration. Note that it is possible to install CURL under Microsoft Windows but it's not necessary for the development of an integration. .NET technologies also make it easy to connect to a [REST / JSON API](https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client).    At the authentication level, 3 options are available:    #### HTTP Basic  This mechanism uses standard HTTP authentication supported by the majority of HTTP clients. Just provide your API key as a user without a password. If you have to do it programmatically, you must add an \"Authorization: Basic&lt;base64 encoded apikey:&gt;\" header.    #### HTTP Bearer  This mechanism uses the same header as HTTP Basic authentication but makes adding a header manually easier. Just add an \"Authorization: Bearer&lt;apikey&gt;\" header.    #### Query  In the case where it would be too complex or impossible for you to add authentication headers on the programming platform used, it is possible to add an apiKey = &lt;apikey&gt; parameter to the URL of each request. e.g.: https://macie.progressionlive.com/server/rest/task/1234?apikey=&lt;apikey&gt;
 *
 * OpenAPI spec version: 1.0
 * Contact: support@progressionlive.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProgressionLive\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ProgressionLive\ApiException;
use ProgressionLive\Configuration;
use ProgressionLive\HeaderSelector;
use ProgressionLive\ObjectSerializer;

/**
 * TimeEntryApi Class Doc Comment
 *
 * @category Class
 * @package  ProgressionLive
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeEntryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation timeEntryCreatePost
     *
     * Create a time entry.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProgressionLive\Model\EntityRef
     */
    public function timeEntryCreatePost($body)
    {
        list($response) = $this->timeEntryCreatePostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation timeEntryCreatePostWithHttpInfo
     *
     * Create a time entry.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProgressionLive\Model\EntityRef, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryCreatePostWithHttpInfo($body)
    {
        $returnType = '\ProgressionLive\Model\EntityRef';
        $request = $this->timeEntryCreatePostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\EntityRef',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryCreatePostAsync
     *
     * Create a time entry.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryCreatePostAsync($body)
    {
        return $this->timeEntryCreatePostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryCreatePostAsyncWithHttpInfo
     *
     * Create a time entry.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryCreatePostAsyncWithHttpInfo($body)
    {
        $returnType = '\ProgressionLive\Model\EntityRef';
        $request = $this->timeEntryCreatePostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryCreatePost'
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryCreatePostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling timeEntryCreatePost'
            );
        }

        $resourcePath = '/timeEntry/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeEntryIdentifierGet
     *
     * Get a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     * @param  string $expand expand (optional)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProgressionLive\Model\TimeEntry
     */
    public function timeEntryIdentifierGet($identifier, $expand = null)
    {
        list($response) = $this->timeEntryIdentifierGetWithHttpInfo($identifier, $expand);
        return $response;
    }

    /**
     * Operation timeEntryIdentifierGetWithHttpInfo
     *
     * Get a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     * @param  string $expand (optional)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProgressionLive\Model\TimeEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryIdentifierGetWithHttpInfo($identifier, $expand = null)
    {
        $returnType = '\ProgressionLive\Model\TimeEntry';
        $request = $this->timeEntryIdentifierGetRequest($identifier, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\TimeEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryIdentifierGetAsync
     *
     * Get a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierGetAsync($identifier, $expand = null)
    {
        return $this->timeEntryIdentifierGetAsyncWithHttpInfo($identifier, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryIdentifierGetAsyncWithHttpInfo
     *
     * Get a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierGetAsyncWithHttpInfo($identifier, $expand = null)
    {
        $returnType = '\ProgressionLive\Model\TimeEntry';
        $request = $this->timeEntryIdentifierGetRequest($identifier, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryIdentifierGet'
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryIdentifierGetRequest($identifier, $expand = null)
    {
        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling timeEntryIdentifierGet'
            );
        }

        $resourcePath = '/timeEntry/{identifier}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand, null);
        }

        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeEntryIdentifierRemoveDelete
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeEntryIdentifierRemoveDelete($identifier)
    {
        $this->timeEntryIdentifierRemoveDeleteWithHttpInfo($identifier);
    }

    /**
     * Operation timeEntryIdentifierRemoveDeleteWithHttpInfo
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryIdentifierRemoveDeleteWithHttpInfo($identifier)
    {
        $returnType = '';
        $request = $this->timeEntryIdentifierRemoveDeleteRequest($identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryIdentifierRemoveDeleteAsync
     *
     * 
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierRemoveDeleteAsync($identifier)
    {
        return $this->timeEntryIdentifierRemoveDeleteAsyncWithHttpInfo($identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryIdentifierRemoveDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierRemoveDeleteAsyncWithHttpInfo($identifier)
    {
        $returnType = '';
        $request = $this->timeEntryIdentifierRemoveDeleteRequest($identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryIdentifierRemoveDelete'
     *
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryIdentifierRemoveDeleteRequest($identifier)
    {
        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling timeEntryIdentifierRemoveDelete'
            );
        }

        $resourcePath = '/timeEntry/{identifier}/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeEntryIdentifierUnapprovePost
     *
     * Reject approval of a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. Either the id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProgressionLive\Model\Result
     */
    public function timeEntryIdentifierUnapprovePost($identifier)
    {
        list($response) = $this->timeEntryIdentifierUnapprovePostWithHttpInfo($identifier);
        return $response;
    }

    /**
     * Operation timeEntryIdentifierUnapprovePostWithHttpInfo
     *
     * Reject approval of a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. Either the id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProgressionLive\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryIdentifierUnapprovePostWithHttpInfo($identifier)
    {
        $returnType = '\ProgressionLive\Model\Result';
        $request = $this->timeEntryIdentifierUnapprovePostRequest($identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\Result',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryIdentifierUnapprovePostAsync
     *
     * Reject approval of a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. Either the id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierUnapprovePostAsync($identifier)
    {
        return $this->timeEntryIdentifierUnapprovePostAsyncWithHttpInfo($identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryIdentifierUnapprovePostAsyncWithHttpInfo
     *
     * Reject approval of a time entry.
     *
     * @param  string $identifier Time entry&#x27;s identifier. Either the id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierUnapprovePostAsyncWithHttpInfo($identifier)
    {
        $returnType = '\ProgressionLive\Model\Result';
        $request = $this->timeEntryIdentifierUnapprovePostRequest($identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryIdentifierUnapprovePost'
     *
     * @param  string $identifier Time entry&#x27;s identifier. Either the id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryIdentifierUnapprovePostRequest($identifier)
    {
        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling timeEntryIdentifierUnapprovePost'
            );
        }

        $resourcePath = '/timeEntry/{identifier}/unapprove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeEntryIdentifierUpdatePost
     *
     * Update a time entry. Only provided fields will be updated.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeEntryIdentifierUpdatePost($body, $identifier)
    {
        $this->timeEntryIdentifierUpdatePostWithHttpInfo($body, $identifier);
    }

    /**
     * Operation timeEntryIdentifierUpdatePostWithHttpInfo
     *
     * Update a time entry. Only provided fields will be updated.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryIdentifierUpdatePostWithHttpInfo($body, $identifier)
    {
        $returnType = '';
        $request = $this->timeEntryIdentifierUpdatePostRequest($body, $identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryIdentifierUpdatePostAsync
     *
     * Update a time entry. Only provided fields will be updated.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierUpdatePostAsync($body, $identifier)
    {
        return $this->timeEntryIdentifierUpdatePostAsyncWithHttpInfo($body, $identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryIdentifierUpdatePostAsyncWithHttpInfo
     *
     * Update a time entry. Only provided fields will be updated.
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryIdentifierUpdatePostAsyncWithHttpInfo($body, $identifier)
    {
        $returnType = '';
        $request = $this->timeEntryIdentifierUpdatePostRequest($body, $identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryIdentifierUpdatePost'
     *
     * @param  \ProgressionLive\Model\TimeEntry $body TimeEntry (required)
     * @param  string $identifier Time entry&#x27;s identifier. One of id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryIdentifierUpdatePostRequest($body, $identifier)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling timeEntryIdentifierUpdatePost'
            );
        }
        // verify the required parameter 'identifier' is set
        if ($identifier === null || (is_array($identifier) && count($identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier when calling timeEntryIdentifierUpdatePost'
            );
        }

        $resourcePath = '/timeEntry/{identifier}/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'identifier' . '}',
                ObjectSerializer::toPathValue($identifier),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeEntryListGet
     *
     * Search for time entries.
     *
     * @param  int $maxResults Maximum number of results to return. The default maximum number is 500 and cannot be exceeded. (optional)
     * @param  int $startResult Buffer data range to ignore before fetching the data. In combination with the maxResults, implements a pagination logic.  Example : 1000 results to fetch StartResult &#x3D; 0, MaxResult &#x3D; 500 (results &#x3D; 1 à 500) StartResult &#x3D; 500, MaxResult &#x3D; 500 (results &#x3D; 501 à 1000) (optional)
     * @param  string $humanResource Filter time entry human resource. The syntax is: humanResource&#x3D;[uid, id, externalId, label:]value.  For example, to search for a human resource by its externalId we specify: humanResource&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $task Filter time entry task. The syntax is: task&#x3D;[id, uid, externalId, code:]value.  For example, to search for a task by its code we specify: task&#x3D;code:AS12345. (optional)
     * @param  string $activity Filter time entry activity. The syntax is: activity&#x3D;[uid, id, label:]value.  For example, to search for an activity by its uid we specify: activity&#x3D;uid:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $client Filter time entry client. The syntax is: client&#x3D;[uid, id, externalId, label:]value.  For example, to search for a client by its externalId we specify: client&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $location Filter time entry location. The syntax is: location&#x3D;[uid, id, externalId, label:]value.  For example, to search for a location by its externalId we specify: location&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $start Filter by time entry start timestamp.   You can specify an identical date or a period.   e.g.: start&#x3D;2018-01-25T13:00:00-05, start&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $end Filter by time entry end timestamp.   You can specify an identical date or a period.   e.g.: end&#x3D;2018-01-25T13:00:00-05, end&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $updated Filter by last updated timestamp.   You can specify any more recent or identical date or a period.   e.g.: updated&#x3D;2018-01-25T13:00:00-05, updated&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $metas Filter by metafields. The syntax is: metas&#x3D;name:value.   The parameter can be specified multiple times to search multiple metas at once. (optional)
     * @param  string $order Sort order of the results. It is possible to specify several sorts separated by commas as well as the sort direction.   e.g.: label DESC,updated ASC (optional)
     * @param  string $identifiers Filter by time entries identifier. Either the id or uid (optional)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProgressionLive\Model\TimeEntry[]
     */
    public function timeEntryListGet($maxResults = null, $startResult = null, $humanResource = null, $task = null, $activity = null, $client = null, $location = null, $start = null, $end = null, $updated = null, $metas = null, $order = null, $identifiers = null)
    {
        list($response) = $this->timeEntryListGetWithHttpInfo($maxResults, $startResult, $humanResource, $task, $activity, $client, $location, $start, $end, $updated, $metas, $order, $identifiers);
        return $response;
    }

    /**
     * Operation timeEntryListGetWithHttpInfo
     *
     * Search for time entries.
     *
     * @param  int $maxResults Maximum number of results to return. The default maximum number is 500 and cannot be exceeded. (optional)
     * @param  int $startResult Buffer data range to ignore before fetching the data. In combination with the maxResults, implements a pagination logic.  Example : 1000 results to fetch StartResult &#x3D; 0, MaxResult &#x3D; 500 (results &#x3D; 1 à 500) StartResult &#x3D; 500, MaxResult &#x3D; 500 (results &#x3D; 501 à 1000) (optional)
     * @param  string $humanResource Filter time entry human resource. The syntax is: humanResource&#x3D;[uid, id, externalId, label:]value.  For example, to search for a human resource by its externalId we specify: humanResource&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $task Filter time entry task. The syntax is: task&#x3D;[id, uid, externalId, code:]value.  For example, to search for a task by its code we specify: task&#x3D;code:AS12345. (optional)
     * @param  string $activity Filter time entry activity. The syntax is: activity&#x3D;[uid, id, label:]value.  For example, to search for an activity by its uid we specify: activity&#x3D;uid:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $client Filter time entry client. The syntax is: client&#x3D;[uid, id, externalId, label:]value.  For example, to search for a client by its externalId we specify: client&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $location Filter time entry location. The syntax is: location&#x3D;[uid, id, externalId, label:]value.  For example, to search for a location by its externalId we specify: location&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $start Filter by time entry start timestamp.   You can specify an identical date or a period.   e.g.: start&#x3D;2018-01-25T13:00:00-05, start&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $end Filter by time entry end timestamp.   You can specify an identical date or a period.   e.g.: end&#x3D;2018-01-25T13:00:00-05, end&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $updated Filter by last updated timestamp.   You can specify any more recent or identical date or a period.   e.g.: updated&#x3D;2018-01-25T13:00:00-05, updated&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $metas Filter by metafields. The syntax is: metas&#x3D;name:value.   The parameter can be specified multiple times to search multiple metas at once. (optional)
     * @param  string $order Sort order of the results. It is possible to specify several sorts separated by commas as well as the sort direction.   e.g.: label DESC,updated ASC (optional)
     * @param  string $identifiers Filter by time entries identifier. Either the id or uid (optional)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProgressionLive\Model\TimeEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryListGetWithHttpInfo($maxResults = null, $startResult = null, $humanResource = null, $task = null, $activity = null, $client = null, $location = null, $start = null, $end = null, $updated = null, $metas = null, $order = null, $identifiers = null)
    {
        $returnType = '\ProgressionLive\Model\TimeEntry[]';
        $request = $this->timeEntryListGetRequest($maxResults, $startResult, $humanResource, $task, $activity, $client, $location, $start, $end, $updated, $metas, $order, $identifiers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\TimeEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryListGetAsync
     *
     * Search for time entries.
     *
     * @param  int $maxResults Maximum number of results to return. The default maximum number is 500 and cannot be exceeded. (optional)
     * @param  int $startResult Buffer data range to ignore before fetching the data. In combination with the maxResults, implements a pagination logic.  Example : 1000 results to fetch StartResult &#x3D; 0, MaxResult &#x3D; 500 (results &#x3D; 1 à 500) StartResult &#x3D; 500, MaxResult &#x3D; 500 (results &#x3D; 501 à 1000) (optional)
     * @param  string $humanResource Filter time entry human resource. The syntax is: humanResource&#x3D;[uid, id, externalId, label:]value.  For example, to search for a human resource by its externalId we specify: humanResource&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $task Filter time entry task. The syntax is: task&#x3D;[id, uid, externalId, code:]value.  For example, to search for a task by its code we specify: task&#x3D;code:AS12345. (optional)
     * @param  string $activity Filter time entry activity. The syntax is: activity&#x3D;[uid, id, label:]value.  For example, to search for an activity by its uid we specify: activity&#x3D;uid:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $client Filter time entry client. The syntax is: client&#x3D;[uid, id, externalId, label:]value.  For example, to search for a client by its externalId we specify: client&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $location Filter time entry location. The syntax is: location&#x3D;[uid, id, externalId, label:]value.  For example, to search for a location by its externalId we specify: location&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $start Filter by time entry start timestamp.   You can specify an identical date or a period.   e.g.: start&#x3D;2018-01-25T13:00:00-05, start&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $end Filter by time entry end timestamp.   You can specify an identical date or a period.   e.g.: end&#x3D;2018-01-25T13:00:00-05, end&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $updated Filter by last updated timestamp.   You can specify any more recent or identical date or a period.   e.g.: updated&#x3D;2018-01-25T13:00:00-05, updated&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $metas Filter by metafields. The syntax is: metas&#x3D;name:value.   The parameter can be specified multiple times to search multiple metas at once. (optional)
     * @param  string $order Sort order of the results. It is possible to specify several sorts separated by commas as well as the sort direction.   e.g.: label DESC,updated ASC (optional)
     * @param  string $identifiers Filter by time entries identifier. Either the id or uid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryListGetAsync($maxResults = null, $startResult = null, $humanResource = null, $task = null, $activity = null, $client = null, $location = null, $start = null, $end = null, $updated = null, $metas = null, $order = null, $identifiers = null)
    {
        return $this->timeEntryListGetAsyncWithHttpInfo($maxResults, $startResult, $humanResource, $task, $activity, $client, $location, $start, $end, $updated, $metas, $order, $identifiers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryListGetAsyncWithHttpInfo
     *
     * Search for time entries.
     *
     * @param  int $maxResults Maximum number of results to return. The default maximum number is 500 and cannot be exceeded. (optional)
     * @param  int $startResult Buffer data range to ignore before fetching the data. In combination with the maxResults, implements a pagination logic.  Example : 1000 results to fetch StartResult &#x3D; 0, MaxResult &#x3D; 500 (results &#x3D; 1 à 500) StartResult &#x3D; 500, MaxResult &#x3D; 500 (results &#x3D; 501 à 1000) (optional)
     * @param  string $humanResource Filter time entry human resource. The syntax is: humanResource&#x3D;[uid, id, externalId, label:]value.  For example, to search for a human resource by its externalId we specify: humanResource&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $task Filter time entry task. The syntax is: task&#x3D;[id, uid, externalId, code:]value.  For example, to search for a task by its code we specify: task&#x3D;code:AS12345. (optional)
     * @param  string $activity Filter time entry activity. The syntax is: activity&#x3D;[uid, id, label:]value.  For example, to search for an activity by its uid we specify: activity&#x3D;uid:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $client Filter time entry client. The syntax is: client&#x3D;[uid, id, externalId, label:]value.  For example, to search for a client by its externalId we specify: client&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $location Filter time entry location. The syntax is: location&#x3D;[uid, id, externalId, label:]value.  For example, to search for a location by its externalId we specify: location&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $start Filter by time entry start timestamp.   You can specify an identical date or a period.   e.g.: start&#x3D;2018-01-25T13:00:00-05, start&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $end Filter by time entry end timestamp.   You can specify an identical date or a period.   e.g.: end&#x3D;2018-01-25T13:00:00-05, end&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $updated Filter by last updated timestamp.   You can specify any more recent or identical date or a period.   e.g.: updated&#x3D;2018-01-25T13:00:00-05, updated&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $metas Filter by metafields. The syntax is: metas&#x3D;name:value.   The parameter can be specified multiple times to search multiple metas at once. (optional)
     * @param  string $order Sort order of the results. It is possible to specify several sorts separated by commas as well as the sort direction.   e.g.: label DESC,updated ASC (optional)
     * @param  string $identifiers Filter by time entries identifier. Either the id or uid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryListGetAsyncWithHttpInfo($maxResults = null, $startResult = null, $humanResource = null, $task = null, $activity = null, $client = null, $location = null, $start = null, $end = null, $updated = null, $metas = null, $order = null, $identifiers = null)
    {
        $returnType = '\ProgressionLive\Model\TimeEntry[]';
        $request = $this->timeEntryListGetRequest($maxResults, $startResult, $humanResource, $task, $activity, $client, $location, $start, $end, $updated, $metas, $order, $identifiers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryListGet'
     *
     * @param  int $maxResults Maximum number of results to return. The default maximum number is 500 and cannot be exceeded. (optional)
     * @param  int $startResult Buffer data range to ignore before fetching the data. In combination with the maxResults, implements a pagination logic.  Example : 1000 results to fetch StartResult &#x3D; 0, MaxResult &#x3D; 500 (results &#x3D; 1 à 500) StartResult &#x3D; 500, MaxResult &#x3D; 500 (results &#x3D; 501 à 1000) (optional)
     * @param  string $humanResource Filter time entry human resource. The syntax is: humanResource&#x3D;[uid, id, externalId, label:]value.  For example, to search for a human resource by its externalId we specify: humanResource&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $task Filter time entry task. The syntax is: task&#x3D;[id, uid, externalId, code:]value.  For example, to search for a task by its code we specify: task&#x3D;code:AS12345. (optional)
     * @param  string $activity Filter time entry activity. The syntax is: activity&#x3D;[uid, id, label:]value.  For example, to search for an activity by its uid we specify: activity&#x3D;uid:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $client Filter time entry client. The syntax is: client&#x3D;[uid, id, externalId, label:]value.  For example, to search for a client by its externalId we specify: client&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $location Filter time entry location. The syntax is: location&#x3D;[uid, id, externalId, label:]value.  For example, to search for a location by its externalId we specify: location&#x3D;externalId:1234.  If the field is not specified we search by label by default. (optional)
     * @param  string $start Filter by time entry start timestamp.   You can specify an identical date or a period.   e.g.: start&#x3D;2018-01-25T13:00:00-05, start&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $end Filter by time entry end timestamp.   You can specify an identical date or a period.   e.g.: end&#x3D;2018-01-25T13:00:00-05, end&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $updated Filter by last updated timestamp.   You can specify any more recent or identical date or a period.   e.g.: updated&#x3D;2018-01-25T13:00:00-05, updated&#x3D;2018-01-25T13:00:00-05,2018-01-25T17:00:00-05 (optional)
     * @param  string $metas Filter by metafields. The syntax is: metas&#x3D;name:value.   The parameter can be specified multiple times to search multiple metas at once. (optional)
     * @param  string $order Sort order of the results. It is possible to specify several sorts separated by commas as well as the sort direction.   e.g.: label DESC,updated ASC (optional)
     * @param  string $identifiers Filter by time entries identifier. Either the id or uid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryListGetRequest($maxResults = null, $startResult = null, $humanResource = null, $task = null, $activity = null, $client = null, $location = null, $start = null, $end = null, $updated = null, $metas = null, $order = null, $identifiers = null)
    {

        $resourcePath = '/timeEntry/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($maxResults !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($maxResults, 'int32');
        }
        // query params
        if ($startResult !== null) {
            $queryParams['startResult'] = ObjectSerializer::toQueryValue($startResult, 'int32');
        }
        // query params
        if ($humanResource !== null) {
            $queryParams['humanResource'] = ObjectSerializer::toQueryValue($humanResource, null);
        }
        // query params
        if ($task !== null) {
            $queryParams['task'] = ObjectSerializer::toQueryValue($task, null);
        }
        // query params
        if ($activity !== null) {
            $queryParams['activity'] = ObjectSerializer::toQueryValue($activity, null);
        }
        // query params
        if ($client !== null) {
            $queryParams['client'] = ObjectSerializer::toQueryValue($client, null);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, null);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end, null);
        }
        // query params
        if ($updated !== null) {
            $queryParams['updated'] = ObjectSerializer::toQueryValue($updated, null);
        }
        // query params
        if ($metas !== null) {
            $queryParams['metas'] = ObjectSerializer::toQueryValue($metas, null);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order, null);
        }
        // query params
        if ($identifiers !== null) {
            $queryParams['identifiers'] = ObjectSerializer::toQueryValue($identifiers, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeEntryUnapprovePost
     *
     * Reject approval of multiple time entries.
     *
     * @param  \ProgressionLive\Model\MultipleUnapproveTimeEntryRequest $body Time entries&#x27; identifiers. Either the id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProgressionLive\Model\Result[]
     */
    public function timeEntryUnapprovePost($body)
    {
        list($response) = $this->timeEntryUnapprovePostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation timeEntryUnapprovePostWithHttpInfo
     *
     * Reject approval of multiple time entries.
     *
     * @param  \ProgressionLive\Model\MultipleUnapproveTimeEntryRequest $body Time entries&#x27; identifiers. Either the id or uid. (required)
     *
     * @throws \ProgressionLive\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProgressionLive\Model\Result[], HTTP status code, HTTP response headers (array of strings)
     */
    public function timeEntryUnapprovePostWithHttpInfo($body)
    {
        $returnType = '\ProgressionLive\Model\Result[]';
        $request = $this->timeEntryUnapprovePostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\Result[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProgressionLive\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeEntryUnapprovePostAsync
     *
     * Reject approval of multiple time entries.
     *
     * @param  \ProgressionLive\Model\MultipleUnapproveTimeEntryRequest $body Time entries&#x27; identifiers. Either the id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryUnapprovePostAsync($body)
    {
        return $this->timeEntryUnapprovePostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeEntryUnapprovePostAsyncWithHttpInfo
     *
     * Reject approval of multiple time entries.
     *
     * @param  \ProgressionLive\Model\MultipleUnapproveTimeEntryRequest $body Time entries&#x27; identifiers. Either the id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeEntryUnapprovePostAsyncWithHttpInfo($body)
    {
        $returnType = '\ProgressionLive\Model\Result[]';
        $request = $this->timeEntryUnapprovePostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeEntryUnapprovePost'
     *
     * @param  \ProgressionLive\Model\MultipleUnapproveTimeEntryRequest $body Time entries&#x27; identifiers. Either the id or uid. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timeEntryUnapprovePostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling timeEntryUnapprovePost'
            );
        }

        $resourcePath = '/timeEntry/unapprove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
