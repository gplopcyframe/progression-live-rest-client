<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProgressionLive
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProgressionLIVE API
 *
 * Welcome to the ProgressionLIVE REST API documentation page.    The data exchange format is [JSON](https://en.wikipedia.org/wiki/JavaScript_Object_Notation). This format facilitates the exchange of data with almost all systems while minimizing the amount of data.    All API operations are listed on this page and can be tested directly.    An [OpenAPI](https://github.com/OAI/OpenAPI-Specification) specification file is available at the link above and allows you to generate clients in several languages ​​using [Swagger](https://swagger.io/swagger-codegen/) tools.    The examples on this page use the command-line tool from the well-known Unix family of systems [CURL](https://curl.haxx.se/). This demonstrates the ease of integration. Note that it is possible to install CURL under Microsoft Windows but it's not necessary for the development of an integration. .NET technologies also make it easy to connect to a [REST / JSON API](https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client).    At the authentication level, 3 options are available:    #### HTTP Basic  This mechanism uses standard HTTP authentication supported by the majority of HTTP clients. Just provide your API key as a user without a password. If you have to do it programmatically, you must add an \"Authorization: Basic&lt;base64 encoded apikey:&gt;\" header.    #### HTTP Bearer  This mechanism uses the same header as HTTP Basic authentication but makes adding a header manually easier. Just add an \"Authorization: Bearer&lt;apikey&gt;\" header.    #### Query  In the case where it would be too complex or impossible for you to add authentication headers on the programming platform used, it is possible to add an apiKey = &lt;apikey&gt; parameter to the URL of each request. e.g.: https://macie.progressionlive.com/server/rest/task/1234?apikey=&lt;apikey&gt;
 *
 * OpenAPI spec version: 1.0
 * Contact: support@progressionlive.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProgressionLive\Model;

use \ArrayAccess;
use \ProgressionLive\ObjectSerializer;

/**
 * Task Class Doc Comment
 *
 * @category Class
 * @description Represents a task. The type of the task is very important because it will determine the contents of the *properties* field.
 * @package  ProgressionLive
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Task implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
'type' => '\ProgressionLive\Model\EntityRef',
'priority' => '\ProgressionLive\Model\EntityRef',
'rv' => '\DateTime',
'idx' => 'int',
'summary' => 'string',
'description' => 'string',
'currentState' => '\ProgressionLive\Model\TaskState',
'endState' => '\ProgressionLive\Model\TaskState',
'client' => '\ProgressionLive\Model\Client',
'clientAddress' => '\ProgressionLive\Model\Address',
'location' => '\ProgressionLive\Model\Location',
'locationAddress' => '\ProgressionLive\Model\Address',
'received' => '\DateTime',
'opened' => '\DateTime',
'humanResource' => '\ProgressionLive\Model\HumanResource',
'helpers' => '\ProgressionLive\Model\EntityRef[]',
'taxConfig' => '\ProgressionLive\Model\TaxConfig',
'optim' => '\ProgressionLive\Model\TaskOptim',
'itemList' => '\ProgressionLive\Model\TaskItemList',
'duration' => 'string',
'signatureText' => 'string',
'signatureOtherText' => 'string',
'attachments' => '\ProgressionLive\Model\EntityRef[]',
'primaryTag' => '\ProgressionLive\Model\EntityRef',
'tags' => '\ProgressionLive\Model\EntityRef[]',
'priceList' => '\ProgressionLive\Model\EntityRef',
'lang' => 'string',
'parentTask' => '\ProgressionLive\Model\EntityRef',
'equipments' => '\ProgressionLive\Model\EntityRef[]',
'creatorUser' => '\ProgressionLive\Model\User',
'properties' => 'map[string,string]',
'metas' => 'map[string,string]',
'url' => 'string',
'id' => 'float',
'uid' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime',
'removed' => '\DateTime',
'externalId' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
'type' => null,
'priority' => null,
'rv' => 'date-time',
'idx' => 'int32',
'summary' => null,
'description' => null,
'currentState' => null,
'endState' => null,
'client' => null,
'clientAddress' => null,
'location' => null,
'locationAddress' => null,
'received' => 'date-time',
'opened' => 'date-time',
'humanResource' => null,
'helpers' => null,
'taxConfig' => null,
'optim' => null,
'itemList' => null,
'duration' => 'duration',
'signatureText' => null,
'signatureOtherText' => null,
'attachments' => null,
'primaryTag' => null,
'tags' => null,
'priceList' => null,
'lang' => null,
'parentTask' => null,
'equipments' => null,
'creatorUser' => null,
'properties' => null,
'metas' => null,
'url' => null,
'id' => null,
'uid' => null,
'created' => 'date-time',
'updated' => 'date-time',
'removed' => 'date-time',
'externalId' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
'type' => 'type',
'priority' => 'priority',
'rv' => 'rv',
'idx' => 'idx',
'summary' => 'summary',
'description' => 'description',
'currentState' => 'currentState',
'endState' => 'endState',
'client' => 'client',
'clientAddress' => 'clientAddress',
'location' => 'location',
'locationAddress' => 'locationAddress',
'received' => 'received',
'opened' => 'opened',
'humanResource' => 'humanResource',
'helpers' => 'helpers',
'taxConfig' => 'taxConfig',
'optim' => 'optim',
'itemList' => 'itemList',
'duration' => 'duration',
'signatureText' => 'signatureText',
'signatureOtherText' => 'signatureOtherText',
'attachments' => 'attachments',
'primaryTag' => 'primaryTag',
'tags' => 'tags',
'priceList' => 'priceList',
'lang' => 'lang',
'parentTask' => 'parentTask',
'equipments' => 'equipments',
'creatorUser' => 'creatorUser',
'properties' => 'properties',
'metas' => 'metas',
'url' => 'url',
'id' => 'id',
'uid' => 'uid',
'created' => 'created',
'updated' => 'updated',
'removed' => 'removed',
'externalId' => 'externalId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
'type' => 'setType',
'priority' => 'setPriority',
'rv' => 'setRv',
'idx' => 'setIdx',
'summary' => 'setSummary',
'description' => 'setDescription',
'currentState' => 'setCurrentState',
'endState' => 'setEndState',
'client' => 'setClient',
'clientAddress' => 'setClientAddress',
'location' => 'setLocation',
'locationAddress' => 'setLocationAddress',
'received' => 'setReceived',
'opened' => 'setOpened',
'humanResource' => 'setHumanResource',
'helpers' => 'setHelpers',
'taxConfig' => 'setTaxConfig',
'optim' => 'setOptim',
'itemList' => 'setItemList',
'duration' => 'setDuration',
'signatureText' => 'setSignatureText',
'signatureOtherText' => 'setSignatureOtherText',
'attachments' => 'setAttachments',
'primaryTag' => 'setPrimaryTag',
'tags' => 'setTags',
'priceList' => 'setPriceList',
'lang' => 'setLang',
'parentTask' => 'setParentTask',
'equipments' => 'setEquipments',
'creatorUser' => 'setCreatorUser',
'properties' => 'setProperties',
'metas' => 'setMetas',
'url' => 'setUrl',
'id' => 'setId',
'uid' => 'setUid',
'created' => 'setCreated',
'updated' => 'setUpdated',
'removed' => 'setRemoved',
'externalId' => 'setExternalId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
'type' => 'getType',
'priority' => 'getPriority',
'rv' => 'getRv',
'idx' => 'getIdx',
'summary' => 'getSummary',
'description' => 'getDescription',
'currentState' => 'getCurrentState',
'endState' => 'getEndState',
'client' => 'getClient',
'clientAddress' => 'getClientAddress',
'location' => 'getLocation',
'locationAddress' => 'getLocationAddress',
'received' => 'getReceived',
'opened' => 'getOpened',
'humanResource' => 'getHumanResource',
'helpers' => 'getHelpers',
'taxConfig' => 'getTaxConfig',
'optim' => 'getOptim',
'itemList' => 'getItemList',
'duration' => 'getDuration',
'signatureText' => 'getSignatureText',
'signatureOtherText' => 'getSignatureOtherText',
'attachments' => 'getAttachments',
'primaryTag' => 'getPrimaryTag',
'tags' => 'getTags',
'priceList' => 'getPriceList',
'lang' => 'getLang',
'parentTask' => 'getParentTask',
'equipments' => 'getEquipments',
'creatorUser' => 'getCreatorUser',
'properties' => 'getProperties',
'metas' => 'getMetas',
'url' => 'getUrl',
'id' => 'getId',
'uid' => 'getUid',
'created' => 'getCreated',
'updated' => 'getUpdated',
'removed' => 'getRemoved',
'externalId' => 'getExternalId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANG_FR = 'fr';
const LANG_EN = 'en';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLangAllowableValues()
    {
        return [
            self::LANG_FR,
self::LANG_EN,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['rv'] = isset($data['rv']) ? $data['rv'] : null;
        $this->container['idx'] = isset($data['idx']) ? $data['idx'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['currentState'] = isset($data['currentState']) ? $data['currentState'] : null;
        $this->container['endState'] = isset($data['endState']) ? $data['endState'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['clientAddress'] = isset($data['clientAddress']) ? $data['clientAddress'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['locationAddress'] = isset($data['locationAddress']) ? $data['locationAddress'] : null;
        $this->container['received'] = isset($data['received']) ? $data['received'] : null;
        $this->container['opened'] = isset($data['opened']) ? $data['opened'] : null;
        $this->container['humanResource'] = isset($data['humanResource']) ? $data['humanResource'] : null;
        $this->container['helpers'] = isset($data['helpers']) ? $data['helpers'] : null;
        $this->container['taxConfig'] = isset($data['taxConfig']) ? $data['taxConfig'] : null;
        $this->container['optim'] = isset($data['optim']) ? $data['optim'] : null;
        $this->container['itemList'] = isset($data['itemList']) ? $data['itemList'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['signatureText'] = isset($data['signatureText']) ? $data['signatureText'] : null;
        $this->container['signatureOtherText'] = isset($data['signatureOtherText']) ? $data['signatureOtherText'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['primaryTag'] = isset($data['primaryTag']) ? $data['primaryTag'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['priceList'] = isset($data['priceList']) ? $data['priceList'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['parentTask'] = isset($data['parentTask']) ? $data['parentTask'] : null;
        $this->container['equipments'] = isset($data['equipments']) ? $data['equipments'] : null;
        $this->container['creatorUser'] = isset($data['creatorUser']) ? $data['creatorUser'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['metas'] = isset($data['metas']) ? $data['metas'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['removed'] = isset($data['removed']) ? $data['removed'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getLangAllowableValues();
        if (!is_null($this->container['lang']) && !in_array($this->container['lang'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lang', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \ProgressionLive\Model\EntityRef
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \ProgressionLive\Model\EntityRef $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return \ProgressionLive\Model\EntityRef
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param \ProgressionLive\Model\EntityRef $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets rv
     *
     * @return \DateTime
     */
    public function getRv()
    {
        return $this->container['rv'];
    }

    /**
     * Sets rv
     *
     * @param \DateTime $rv rv
     *
     * @return $this
     */
    public function setRv($rv)
    {
        $this->container['rv'] = $rv;

        return $this;
    }

    /**
     * Gets idx
     *
     * @return int
     */
    public function getIdx()
    {
        return $this->container['idx'];
    }

    /**
     * Sets idx
     *
     * @param int $idx idx
     *
     * @return $this
     */
    public function setIdx($idx)
    {
        $this->container['idx'] = $idx;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currentState
     *
     * @return \ProgressionLive\Model\TaskState
     */
    public function getCurrentState()
    {
        return $this->container['currentState'];
    }

    /**
     * Sets currentState
     *
     * @param \ProgressionLive\Model\TaskState $currentState currentState
     *
     * @return $this
     */
    public function setCurrentState($currentState)
    {
        $this->container['currentState'] = $currentState;

        return $this;
    }

    /**
     * Gets endState
     *
     * @return \ProgressionLive\Model\TaskState
     */
    public function getEndState()
    {
        return $this->container['endState'];
    }

    /**
     * Sets endState
     *
     * @param \ProgressionLive\Model\TaskState $endState endState
     *
     * @return $this
     */
    public function setEndState($endState)
    {
        $this->container['endState'] = $endState;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \ProgressionLive\Model\Client
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \ProgressionLive\Model\Client $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets clientAddress
     *
     * @return \ProgressionLive\Model\Address
     */
    public function getClientAddress()
    {
        return $this->container['clientAddress'];
    }

    /**
     * Sets clientAddress
     *
     * @param \ProgressionLive\Model\Address $clientAddress clientAddress
     *
     * @return $this
     */
    public function setClientAddress($clientAddress)
    {
        $this->container['clientAddress'] = $clientAddress;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \ProgressionLive\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \ProgressionLive\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets locationAddress
     *
     * @return \ProgressionLive\Model\Address
     */
    public function getLocationAddress()
    {
        return $this->container['locationAddress'];
    }

    /**
     * Sets locationAddress
     *
     * @param \ProgressionLive\Model\Address $locationAddress locationAddress
     *
     * @return $this
     */
    public function setLocationAddress($locationAddress)
    {
        $this->container['locationAddress'] = $locationAddress;

        return $this;
    }

    /**
     * Gets received
     *
     * @return \DateTime
     */
    public function getReceived()
    {
        return $this->container['received'];
    }

    /**
     * Sets received
     *
     * @param \DateTime $received received
     *
     * @return $this
     */
    public function setReceived($received)
    {
        $this->container['received'] = $received;

        return $this;
    }

    /**
     * Gets opened
     *
     * @return \DateTime
     */
    public function getOpened()
    {
        return $this->container['opened'];
    }

    /**
     * Sets opened
     *
     * @param \DateTime $opened opened
     *
     * @return $this
     */
    public function setOpened($opened)
    {
        $this->container['opened'] = $opened;

        return $this;
    }

    /**
     * Gets humanResource
     *
     * @return \ProgressionLive\Model\HumanResource
     */
    public function getHumanResource()
    {
        return $this->container['humanResource'];
    }

    /**
     * Sets humanResource
     *
     * @param \ProgressionLive\Model\HumanResource $humanResource humanResource
     *
     * @return $this
     */
    public function setHumanResource($humanResource)
    {
        $this->container['humanResource'] = $humanResource;

        return $this;
    }

    /**
     * Gets helpers
     *
     * @return \ProgressionLive\Model\EntityRef[]
     */
    public function getHelpers()
    {
        return $this->container['helpers'];
    }

    /**
     * Sets helpers
     *
     * @param \ProgressionLive\Model\EntityRef[] $helpers List of task helpers.
     *
     * @return $this
     */
    public function setHelpers($helpers)
    {
        $this->container['helpers'] = $helpers;

        return $this;
    }

    /**
     * Gets taxConfig
     *
     * @return \ProgressionLive\Model\TaxConfig
     */
    public function getTaxConfig()
    {
        return $this->container['taxConfig'];
    }

    /**
     * Sets taxConfig
     *
     * @param \ProgressionLive\Model\TaxConfig $taxConfig taxConfig
     *
     * @return $this
     */
    public function setTaxConfig($taxConfig)
    {
        $this->container['taxConfig'] = $taxConfig;

        return $this;
    }

    /**
     * Gets optim
     *
     * @return \ProgressionLive\Model\TaskOptim
     */
    public function getOptim()
    {
        return $this->container['optim'];
    }

    /**
     * Sets optim
     *
     * @param \ProgressionLive\Model\TaskOptim $optim optim
     *
     * @return $this
     */
    public function setOptim($optim)
    {
        $this->container['optim'] = $optim;

        return $this;
    }

    /**
     * Gets itemList
     *
     * @return \ProgressionLive\Model\TaskItemList
     */
    public function getItemList()
    {
        return $this->container['itemList'];
    }

    /**
     * Sets itemList
     *
     * @param \ProgressionLive\Model\TaskItemList $itemList itemList
     *
     * @return $this
     */
    public function setItemList($itemList)
    {
        $this->container['itemList'] = $itemList;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration The task duration in ISO 8601 format. e.g.: PT1H20M
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets signatureText
     *
     * @return string
     */
    public function getSignatureText()
    {
        return $this->container['signatureText'];
    }

    /**
     * Sets signatureText
     *
     * @param string $signatureText Textual name of the main signature. See /task/{identifier}/signature operation for the image.
     *
     * @return $this
     */
    public function setSignatureText($signatureText)
    {
        $this->container['signatureText'] = $signatureText;

        return $this;
    }

    /**
     * Gets signatureOtherText
     *
     * @return string
     */
    public function getSignatureOtherText()
    {
        return $this->container['signatureOtherText'];
    }

    /**
     * Sets signatureOtherText
     *
     * @param string $signatureOtherText Textual name of the extra signature. See /task/{identifier}/signature/other operation for the image.
     *
     * @return $this
     */
    public function setSignatureOtherText($signatureOtherText)
    {
        $this->container['signatureOtherText'] = $signatureOtherText;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \ProgressionLive\Model\EntityRef[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \ProgressionLive\Model\EntityRef[] $attachments List of attachments for the task. The content is not included directly. See the operation /task/attachment/{identifier}.
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets primaryTag
     *
     * @return \ProgressionLive\Model\EntityRef
     */
    public function getPrimaryTag()
    {
        return $this->container['primaryTag'];
    }

    /**
     * Sets primaryTag
     *
     * @param \ProgressionLive\Model\EntityRef $primaryTag primaryTag
     *
     * @return $this
     */
    public function setPrimaryTag($primaryTag)
    {
        $this->container['primaryTag'] = $primaryTag;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \ProgressionLive\Model\EntityRef[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \ProgressionLive\Model\EntityRef[] $tags The list of secondary tags for the task.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets priceList
     *
     * @return \ProgressionLive\Model\EntityRef
     */
    public function getPriceList()
    {
        return $this->container['priceList'];
    }

    /**
     * Sets priceList
     *
     * @param \ProgressionLive\Model\EntityRef $priceList priceList
     *
     * @return $this
     */
    public function setPriceList($priceList)
    {
        $this->container['priceList'] = $priceList;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang The language code to use. en or fr. If not provided, the language of the client will be used.
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $allowedValues = $this->getLangAllowableValues();
        if (!is_null($lang) && !in_array($lang, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lang', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets parentTask
     *
     * @return \ProgressionLive\Model\EntityRef
     */
    public function getParentTask()
    {
        return $this->container['parentTask'];
    }

    /**
     * Sets parentTask
     *
     * @param \ProgressionLive\Model\EntityRef $parentTask parentTask
     *
     * @return $this
     */
    public function setParentTask($parentTask)
    {
        $this->container['parentTask'] = $parentTask;

        return $this;
    }

    /**
     * Gets equipments
     *
     * @return \ProgressionLive\Model\EntityRef[]
     */
    public function getEquipments()
    {
        return $this->container['equipments'];
    }

    /**
     * Sets equipments
     *
     * @param \ProgressionLive\Model\EntityRef[] $equipments List of the task's equipments.
     *
     * @return $this
     */
    public function setEquipments($equipments)
    {
        $this->container['equipments'] = $equipments;

        return $this;
    }

    /**
     * Gets creatorUser
     *
     * @return \ProgressionLive\Model\User
     */
    public function getCreatorUser()
    {
        return $this->container['creatorUser'];
    }

    /**
     * Sets creatorUser
     *
     * @param \ProgressionLive\Model\User $creatorUser creatorUser
     *
     * @return $this
     */
    public function setCreatorUser($creatorUser)
    {
        $this->container['creatorUser'] = $creatorUser;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,string] $properties Properties specific to the type of the entity.
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets metas
     *
     * @return map[string,string]
     */
    public function getMetas()
    {
        return $this->container['metas'];
    }

    /**
     * Sets metas
     *
     * @param map[string,string] $metas Metas properties of this entity. Most schema entities (TODO: list) support this type of property. They make it possible to store various information on the entity without the fields being defined beforehand.
     *
     * @return $this
     */
    public function setMetas($metas)
    {
        $this->container['metas'] = $metas;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The REST api url of this entity to read it.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id The unique identifier of this entity. Auto generated by the system.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid The unique universal identifier of this entity.
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets removed
     *
     * @return \DateTime
     */
    public function getRemoved()
    {
        return $this->container['removed'];
    }

    /**
     * Sets removed
     *
     * @param \DateTime $removed removed
     *
     * @return $this
     */
    public function setRemoved($removed)
    {
        $this->container['removed'] = $removed;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId Unique field to identify a record by the identifier of an external system.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
